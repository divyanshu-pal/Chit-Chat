{"ast":null,"code":"var _jsxFileName = \"G:\\\\Project\\\\chatt\\\\chatme\\\\src\\\\components\\\\SetAvatar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Buffer } from \"buffer\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { setAvatarRoute } from \"../utils/APIRouts\";\nimport loader from '../assets/loader.gif';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SetAvatar() {\n  _s();\n  const toastOptions = {\n    position: \"bottom-right\",\n    autoClose: 8000,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"dark\"\n  };\n  const navigate = useNavigate();\n  const api = `https://api.multiavatar.com/4645646`;\n  const [avatar, setAvatar] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\n  useEffect(() => {\n    if (!localStorage.getItem(\"chat-app-user\")) navigate(\"/login\");\n  }, [navigate]);\n  useEffect(async () => {\n    const data = [];\n    for (let i = 0; i < 4; i++) {\n      const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\n      const buffer = new Buffer(image.data);\n      data.push(buffer.toString(\"base64\"));\n    }\n    setAvatar(data);\n    setLoading(false);\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = [];\n      try {\n        for (let i = 0; i < 4; i++) {\n          const response = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`, {\n            responseType: 'arraybuffer'\n          } // Ensures proper handling of binary data\n          );\n          const base64 = btoa(new Uint8Array(response.data).reduce((acc, byte) => acc + String.fromCharCode(byte), ''));\n          data.push(base64);\n        }\n        setAvatar(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Failed to fetch avatars:', error);\n        setLoading(false); // make sure to set loading false even if there is an error\n      }\n    };\n    fetchData();\n  }, []);\n\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     try {\n  //       const data = [];\n  //       for (let x = 0; x < 4; x++) {\n  //         const response = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\n  //         const imageBase64 = btoa(new Uint8Array(response.data).reduce((data, byte) => data + String.fromCharCode(byte), ''));\n  //         data.push(imageBase64);\n  //       }\n  //       setAvatar(data);\n  //       setLoading(false);\n  //     } catch (error) {\n  //       console.error('Failed to fetch avatars:', error);\n  //       toast.error(\"Failed to load avatars. Please try again.\", toastOptions);\n  //       setLoading(false); // Ensure loading is false upon error\n  //     }\n  //   }\n  //   fetchData();\n  // }, []);\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     const data = [];\n  //     for (let i = 0; i < 4; i++) {\n  //       try {\n  //         // const response = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`, {\n  //         //   responseType: 'arraybuffer' // Ensures that you get the data in an ArrayBuffer which is necessary for binary data\n  //         // });\n  //         // const base64 = btoa(\n  //         //   new Uint8Array(response.data)\n  //         //     .reduce((acc, byte) => acc + String.fromCharCode(byte), '')\n  //         // );\n  //         // data.push(base64);\n  //         const image = await axios.get(\n  //           `${api}/${Math.round(Math.random() * 1000)}`\n  //         );\n  //         const buffer = new Buffer(image.data);\n  //         data.push(buffer.toString(\"base64\"));\n  //       }\n  //       } catch (error) {\n  //         console.error('Failed to fetch an avatar:', error);\n  //         toast.error(\"Failed to load an avatar. Please try again.\", toastOptions);\n  //       }\n  //     }\n  //     setAvatar(data);\n  //     setLoading(false);\n  //   }\n  //   fetchData();\n  // }, []);\n\n  // Correct useEffect for redirect\n  useEffect(() => {\n    if (!localStorage.getItem(\"chat-app-user\")) {\n      navigate(\"/login\");\n    }\n  }, []);\n  const setProfilePicture = async () => {\n    if (selectedAvatar === undefined) {\n      toast.error(\"Please select an avatar\");\n    } else {\n      console.log(\"d\");\n      const userdata = localStorage.getItem(\"chat-app-user\");\n      console.log(userdata);\n      const user = JSON.parse(userdata);\n      const {\n        data\n      } = await axios.post(`${setAvatarRoute}/${user._id}`, {\n        image: avatar[selectedAvatar]\n      });\n      if (data.isSet) {\n        user.isAvatarImageSet = true;\n        user.avatarImage = data.image;\n        localStorage.setItem(\"chat-app-user\", JSON.stringify(user));\n        navigate(\"/\");\n      } else {\n        toast.error(\"Error setting avatar. Please try again.\", toastOptions);\n      }\n    }\n  };\n\n  // if (loading) return <p>Loading...</p>; // Handle loading state\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: loader,\n      alt: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col justify-center items-center min-h-screen bg-orange-800\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \" mt-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-white\",\n          children: \"Pick an Avatar as your profile picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-wrap justify-center items-center\",\n        children: avatar.map((avatar, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `w-48 h-48 p-5 ${selectedAvatar === index ? \"border-4 border-blue-500\" : \"\"}`,\n          onClick: () => setSelectedAvatar(index),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `data:image/svg+xml;base64,${avatar}`,\n            alt: `Avatar ${index}`,\n            className: \"max-w-full max-h-full\" // Ensure image fits within the container\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 11\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-2 rounded-md text-white bg-black\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setProfilePicture,\n          children: \"Set as Profile Picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(SetAvatar, \"IujqyMEIOerF01uUzrb3b+3HMws=\", false, function () {\n  return [useNavigate];\n});\n_c = SetAvatar;\nvar _c;\n$RefreshReg$(_c, \"SetAvatar\");","map":{"version":3,"names":["React","useEffect","useState","axios","Buffer","ToastContainer","toast","useNavigate","setAvatarRoute","loader","jsxDEV","_jsxDEV","Fragment","_Fragment","SetAvatar","_s","toastOptions","position","autoClose","pauseOnHover","draggable","theme","navigate","api","avatar","setAvatar","loading","setLoading","selectedAvatar","setSelectedAvatar","undefined","localStorage","getItem","data","i","image","get","Math","round","random","buffer","push","toString","fetchData","response","responseType","base64","btoa","Uint8Array","reduce","acc","byte","String","fromCharCode","error","console","setProfilePicture","log","userdata","user","JSON","parse","post","_id","isSet","isAvatarImageSet","avatarImage","setItem","stringify","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","_c","$RefreshReg$"],"sources":["G:/Project/chatt/chatme/src/components/SetAvatar.js"],"sourcesContent":["\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n import { Buffer } from \"buffer\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { setAvatarRoute } from \"../utils/APIRouts\";\r\nimport loader from '../assets/loader.gif'\r\n \r\nexport default function SetAvatar() {\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n  const api = `https://api.multiavatar.com/4645646`;\r\n\r\n  const [avatar, setAvatar] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"chat-app-user\"))\r\n      navigate(\"/login\");\r\n  }, [navigate]);\r\n\r\n  \r\n\r\n  useEffect(async () => {\r\n    const data = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      const image = await axios.get(\r\n        `${api}/${Math.round(Math.random() * 1000)}`\r\n      );\r\n      const buffer = new Buffer(image.data);\r\n      data.push(buffer.toString(\"base64\"));\r\n    }\r\n    setAvatar(data);\r\n      setLoading(false);\r\n  }, []);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const data = [];\r\n      try {\r\n        for (let i = 0; i < 4; i++) {\r\n          const response = await axios.get(\r\n            `${api}/${Math.round(Math.random() * 1000)}`,\r\n            { responseType: 'arraybuffer' }  // Ensures proper handling of binary data\r\n          );\r\n          const base64 = btoa(\r\n            new Uint8Array(response.data)\r\n              .reduce((acc, byte) => acc + String.fromCharCode(byte), '')\r\n          );\r\n          data.push(base64);\r\n        }\r\n        setAvatar(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Failed to fetch avatars:', error);\r\n        setLoading(false); // make sure to set loading false even if there is an error\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n  \r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   async function fetchData() {\r\n  //     try {\r\n  //       const data = [];\r\n  //       for (let x = 0; x < 4; x++) {\r\n  //         const response = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\r\n  //         const imageBase64 = btoa(new Uint8Array(response.data).reduce((data, byte) => data + String.fromCharCode(byte), ''));\r\n  //         data.push(imageBase64);\r\n  //       }\r\n  //       setAvatar(data);\r\n  //       setLoading(false);\r\n  //     } catch (error) {\r\n  //       console.error('Failed to fetch avatars:', error);\r\n  //       toast.error(\"Failed to load avatars. Please try again.\", toastOptions);\r\n  //       setLoading(false); // Ensure loading is false upon error\r\n  //     }\r\n  //   }\r\n  //   fetchData();\r\n  // }, []);\r\n  // useEffect(() => {\r\n  //   async function fetchData() {\r\n  //     const data = [];\r\n  //     for (let i = 0; i < 4; i++) {\r\n  //       try {\r\n  //         // const response = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`, {\r\n  //         //   responseType: 'arraybuffer' // Ensures that you get the data in an ArrayBuffer which is necessary for binary data\r\n  //         // });\r\n  //         // const base64 = btoa(\r\n  //         //   new Uint8Array(response.data)\r\n  //         //     .reduce((acc, byte) => acc + String.fromCharCode(byte), '')\r\n  //         // );\r\n  //         // data.push(base64);\r\n  //         const image = await axios.get(\r\n  //           `${api}/${Math.round(Math.random() * 1000)}`\r\n  //         );\r\n  //         const buffer = new Buffer(image.data);\r\n  //         data.push(buffer.toString(\"base64\"));\r\n  //       }\r\n  //       } catch (error) {\r\n  //         console.error('Failed to fetch an avatar:', error);\r\n  //         toast.error(\"Failed to load an avatar. Please try again.\", toastOptions);\r\n  //       }\r\n  //     }\r\n  //     setAvatar(data);\r\n  //     setLoading(false);\r\n  //   }\r\n  //   fetchData();\r\n  // }, []);\r\n  \r\n\r\n  // Correct useEffect for redirect\r\n  useEffect(() => {\r\n    if (!localStorage.getItem(\"chat-app-user\")) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n\r\n  const setProfilePicture = async () => {\r\n    if (selectedAvatar === undefined) {\r\n      toast.error(\"Please select an avatar\");\r\n    } else {\r\n      console.log(\"d\")\r\n      const userdata= localStorage.getItem(\"chat-app-user\");\r\n      console.log(userdata);\r\n      const user = JSON.parse(userdata);\r\n      \r\n      const { data } = await axios.post(`${setAvatarRoute}/${user._id}`, {\r\n        image: avatar[selectedAvatar],\r\n      });\r\n\r\n      if (data.isSet) {\r\n        user.isAvatarImageSet = true;\r\n        user.avatarImage = data.image;\r\n        localStorage.setItem(\r\n          \"chat-app-user\",\r\n          JSON.stringify(user)\r\n        );\r\n        navigate(\"/\");\r\n      } else {\r\n        toast.error(\"Error setting avatar. Please try again.\", toastOptions);\r\n      }\r\n    }\r\n  };\r\n\r\n  // if (loading) return <p>Loading...</p>; // Handle loading state\r\n\r\n  return (\r\n    <>\r\n     {loading ?(\r\n      <img src={loader} alt=\"loader\"/>\r\n     ):(\r\n    <div className=\"flex flex-col justify-center items-center min-h-screen bg-orange-800\">\r\n    {/* flex flex-col justify-center items-center min-h-screen bg-orange-800 */}\r\n      <div className=\" mt-4\">\r\n        <h1 className=\"text-2xl font-bold text-white\">Pick an Avatar as your profile picture</h1>\r\n      </div>\r\n\r\n      <div className=\"flex flex-wrap justify-center items-center\">\r\n      {avatar.map((avatar, index) => (\r\n        <div \r\n          key={index}\r\n          className={`w-48 h-48 p-5 ${\r\n            selectedAvatar === index ? \"border-4 border-blue-500\" : \"\"\r\n          }`}\r\n          onClick={() => setSelectedAvatar(index)}\r\n        >\r\n          <img\r\n            src={`data:image/svg+xml;base64,${avatar}`}\r\n            alt={`Avatar ${index}`}\r\n            className=\"max-w-full max-h-full\" // Ensure image fits within the container\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n\r\n      <div className=\"p-2 rounded-md text-white bg-black\">\r\n      <button onClick={setProfilePicture}>Set as Profile Picture</button>\r\n      </div>\r\n      <ToastContainer />\r\n    </div>\r\n     )}\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}